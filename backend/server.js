require("dotenv").config();
const express = require("express");
const { ApolloServer } = require("apollo-server-express");
const cors = require("cors");
const helmet = require("helmet");
const morgan = require("morgan");
const mongoose = require("mongoose");

// –Ü–º–ø–æ—Ä—Ç –≤–∞—à–æ—ó —Å—Ö–µ–º–∏ —Ç–∞ —Ä–µ–∑–æ–ª—å–≤–µ—Ä—ñ–≤
const typeDefs = require("./graphql/typeDefs");
const resolvers = require("./graphql/resolvers");

// –§—É–Ω–∫—Ü—ñ—è, —â–æ –æ—Ç—Ä–∏–º—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–æ–∫–µ–Ω–∞ (–∞–Ω–∞–ª–æ–≥ –≤–∞—à–æ–≥–æ authMiddleware)
const { getUserFromToken } = require("./utils/auth");

async function startServer() {
  const app = express();

  app.use(express.json());
  app.use(cors());
  app.use(helmet());
  app.use(morgan("dev"));

  // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
  mongoose
    .connect(process.env.MONGO_URI, {})
    .then(() => console.log("‚úÖ MongoDB –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ"))
    .catch((err) => console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏:", err));

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ Apollo Server
  const server = new ApolloServer({
    typeDefs,
    resolvers,
    context: async ({ req }) => {
      // –î—ñ—Å—Ç–∞—î–º–æ —Ç–æ–∫–µ–Ω –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
      // –§–æ—Ä–º–∞—Ç: "Bearer <—Ç–æ–∫–µ–Ω>"
      const token = req.headers.authorization || "";
      const user = await getUserFromToken(token.replace("Bearer ", ""));
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ user –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –≤—ñ–Ω –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π —É –≤—Å—ñ—Ö —Ä–µ–∑–æ–ª—å–≤–µ—Ä–∞—Ö
      return { user };
    },
  });

  // –ó–∞–ø—É—Å–∫–∞—î–º–æ ApolloServer –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –¥–æ Express
  await server.start();
  server.applyMiddleware({ app, path: "/graphql" });

  const PORT = process.env.PORT || 8000;
  app.listen(PORT, () => {
    console.log(`üöÄ GraphQL Server –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`GraphQL endpoint: http://localhost:${PORT}/graphql`);
  });
}

startServer();
